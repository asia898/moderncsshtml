@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400&display=swap');

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

body {
  font-family: 'Open Sans', sans-serif;
  background: #fff;
  color: #333;
  line-height: 1.6
}

ul {
  list-style: none;
}

a {
  color: #333;
  text-decoration: none;
}

h1, h2 {
  font-weight: 300;
  /* low line-height so that when the text is splitted into 2 lines */
  line-height: 1.2;
}

img {
  /* The default with will be 100% o the container */
  width: 100%;
}

/* Navbar */
.navbar {
  display: flex;
  /* Vertical Navbar */
  align-items: center;
  justify-content: space-between;
  background-color: #333;
  color: #fff;
  opacity: 0.8;
  width: 100%;
  height: 70px;
  /* Navbar will be stacked on the top */
  position: fixed;
  top: 0px;
  padding: 0 30px;
  transition: 0.5s;
}

.navbar.top {
  background: transparent;
}

.navbar a {
  color:#fff;
  /* spacing up the elements */
  padding: 10px 20px;
  margin: 0 5px;
}

.navbar a:hover {
  border-bottom: #28a745 2px solid;
}

.navbar ul {
  /* NavBar elements displayed in the row */
  display: flex;
}

.navbar .logo {
  font-weight: 400;
}

/* Header */

/* Creating overlay image will be darker */
.hero {
  background: url('../img/home/showcase.jpg') no-repeat center center/cover;
  /* Needed to aligning things on the main axis */
  height: 100vh;
  position: relative;
  color: #fff;
}

/* Centering the content */
.hero .content {
  display: flex;
  /* changing diection */
  flex-direction: column;
  align-items: center;
  /* Aligning on the main axis require a height parent has 100vh we will set the height to 100%*/
  justify-content: center;
  /* 100% of its container */
  height: 100%;
  text-align: center;
  padding: 0 20px;
}

.hero .content h1 {
  font-size: 55px
}

.hero .content p {
  font-size: 23px;
  /* So that the paragraph doesnt extend much */
  max-width: 600px;
  margin: 20px 0 30px;
}

.hero::before {
  /* Content is needed lets leave it empty */
  content: '';
  /* In thehero we set position relative absolute, parent needs to be relative */
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  /* a for thetransparency */
  background: rgba(0,0,0,0.6);
}

.hero * {
  /* The heigher the z-index is the closer to you on the screen */
  z-index: 10;
}

.hero.blog {
  background: url('../img/home/blog.jpg') no-repeat center center/cover;
  height: 30vh;
}

/* Icons */
.icons {
  padding: 30px;
}

.icons h3 {
  font-weight: bold;
  margin-bottom: 15px;
}

.icons i {
  background-color: #28a745;
  color: #fff;
  padding: 1rem;
  border-radius: 50%;
  margin-bottom: 15px;
}


.cases img:hover {
  opacity: 0.7;
}

.team img {
  border-radius: 50%;
}

/* Callback form */
.callback-form {
  width: 100%;
  padding: 20px 0;
}

.callback-form label {
  display: block;
  margin-bottom: 5px;
}

.callback-form .form-controll {
  margin-bottom: 15px;

}

.callback-form input {
  width: 100%;
  padding: 4px;
  height: 40px;
  border: #f5f5f5;
}

.callback-form .btn {
  padding: 12px 0;
  margin-top: 20px;
}

.callback-form input:focus {
  outline-color: #28a745;
}

/* Post */
.post {
  padding: 50px 30px;
}

.post h2 {
  font-size: 40px;
  margin-bottom: 20px;
  padding-bottom: 10px;
  border-bottom: #ccc solid 1px;
}

.post .meta {
  margin-bottom: 30px;
}

.post img {
  /* 2) */
  width: 300px;
  border-radius: 50%;
  display: block;
  margin: 0 auto 30px;
}



/* Footer */

.footer {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  height: 200px;
}

.footer a {
  color: #fff;

}

.footer a:hover {
  color: #28a745;
}

.footer .social > * {
  margin-right: 30px;
}

/* Mobile */
@media(max-width: 768px) {
  .navbar {
    flex-direction: column;
    height: 120px;
    padding: 20px;
  }

  .navbar a {
    padding: 10px 10px;
  }

  .flex-items{
    flex-direction: column;
    /* We coul also change the display into block */
  }

  .flex-columns .column, .flex-grid .column {
    /* 1) */
    flex: 100%;
    max-width: 100%;

  }

  .team img {
    width: 70%;
  }
}













/* Notes

1)
flex property is the shorthand for flex-grow, flex-shrink and flex-basis
The second and third parameters are optional

flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
flex: 0 1 auto -sizes the item based on its width/height properties
  or its content if not set it makes the flex item inflexible when
  there is some space left but allows it shrink to its minimum

flex: auto = flex: 1 1 auto
  item is sized based on its width/height properties and makes it
  fully flexible so that it can absorbany extra space along the main
  axis

flex: none = flex: 0 0 auto - size acording of the item size and
  inflexible

flex: <positive number>
  flex: 1 0px
  flexible basis is zeroif all items use this pattern their sizes will be
  proportionalto the specified flex factor


2)
Centering content without using flexible
display block (it is inline by default)
mand margin 0 auto an




 */
